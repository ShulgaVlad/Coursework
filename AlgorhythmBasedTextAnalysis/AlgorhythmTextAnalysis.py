from collections import defaultdict
import re

class AlgorhythmTextAnalysis:
    def __init__(self, top_words):
        super().__init__()
        self.top_words = top_words  # Очікується, що це набір (set) слів із закінченнями

    def run(self):
        # Тематичні словники з повними формами слів
        topic_keywords = {
            "Комп'ютери": {
                "систем", "комп’ютер", "збірк", "компонент", "процесор", "пам’ят", "материнськ", "плат",
                "відеокарт", "програмуван", "софт", "жорстк", "диск", "операційн", "мереж", "сервер",
                "алгоритм", "код", "монітор", "клавіатур"
            },
            "Медицина": {
                "лік", "діагностик", "хвороб", "пацієнт", "лікар", "симптом", "терап", "вакцин",
                "операц", "аналіз", "медсестр", "клінік", "лікуван", "діагноз", "рецепт", "аптек",
                "хірург", "інфекц", "здоров’", "епідем"
            },
            "Фінанси": {
                "грош", "інвестиц", "економік", "бюджет", "прибуток", "валют", "фінанс", "банк",
                "кредит", "податк", "ринок", "акц", "бірж", "капітал", "борг", "обмін", "платіж",
                "бухгалтер", "дохід", "витрат"
            },
            "Освіта": {
                "університет", "навчан", "школ", "курс", "лекц", "вчител", "студент", "підручник",
                "іспит", "знан", "академ", "диплом", "урок", "семінар", "досліджен", "бібліотек",
                "освіт", "наук", "професор", "гурт"
            },
            "Спорт": {
                "футбол", "баскетбол", "спортсмен", "олімпіад", "тренуван", "м’яч", "перемог", "матч",
                "змаган", "стадіон", "біг", "теніс", "плаван", "команд", "тренер", "рекорд",
                "чемпіонат", "гр", "фітнес", "спортзал"
            },
            "Технології": {
                "інновац", "гаджет", "інтернет", "дан", "штучн", "інтелект", "робот", "програм",
                "апарат", "технік", "розробк", "електронік", "мобільн", "смартфон", "хмарн",
                "безпек", "кібератак", "автоматизац", "дрон", "сенсор"
            },
            "Мистецтво": {
                "картин", "музик", "театр", "кіно", "скульптур", "художник", "виставк", "галере",
                "танець", "пісн", "актор", "режисер", "полотн", "інструмент", "композитор", "фільм",
                "поез", "літератур", "творчість", "дизайн"
            },
            "Подорожі": {
                "подорож", "туризм", "готель", "літак", "поїзд", "міст", "країн", "відпочин",
                "екскурс", "маршрут", "віз", "пляж", "гор", "карт", "багаж", "квиток", "путівник",
                "культур", "пригод", "фото"
            },
            "Екологія": {
                "природ", "клімат", "еколог", "ліс", "вод", "повітр", "забруднен", "енерг",
                "переробк", "тварин", "рослин", "глобальн", "потеплін", "озон", "відход",
                "захист", "ресурс", "біорізноман", "сонячн", "вітер"
            },
            "Кулінарія": {
                "їж", "рецепт", "кухн", "страв", "інгредієнт", "готуват", "смажит", "пект",
                "суп", "десерт", "нап", "приправ", "ресторан", "меню", "смак", "кухар", "плит",
                "тарілк", "поживн", "дієт"
            }
        }

        # Аналіз тематики
        topic_scores = defaultdict(int)

        # Порівняння слів без урахування закінчень
        for topic, keywords in topic_keywords.items():
            for keyword in keywords:
                for top_word in self.top_words:
                    # Перевіряємо, чи є одне слово частиною іншого, або чи вони мають спільну основу
                    if (keyword in top_word or top_word in keyword) and min(len(keyword), len(top_word)) >= 3:
                        topic_scores[topic] += 1

        # Визначаємо тему з найбільшою кількістю збігів
        detected_topic = max(topic_scores, key=topic_scores.get) if topic_scores else "Невідомо"
        return detected_topic